// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowSelenium.Testes.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Register", Description="\tSendo um usuário do sistema\r\n\tPosso acessar a tela de registro\r\n\tPara cadastrar " +
        "um usuário", SourceFile="Testes\\Features\\Register.feature", SourceLine=0)]
    public partial class RegisterFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Register.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Testes/Features", "Register", "\tSendo um usuário do sistema\r\n\tPosso acessar a tela de registro\r\n\tPara cadastrar " +
                    "um usuário", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Preencher os campos de registro", SourceLine=5)]
        public virtual void PreencherOsCamposDeRegistro()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Preencher os campos de registro", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Campo",
                            "Valor"});
                table1.AddRow(new string[] {
                            "First Name",
                            "Luís"});
                table1.AddRow(new string[] {
                            "Last Name",
                            "Silveira"});
                table1.AddRow(new string[] {
                            "Address",
                            "Rua do teste, 151"});
                table1.AddRow(new string[] {
                            "Email address",
                            "teste@teste.com.br"});
                table1.AddRow(new string[] {
                            "Phone",
                            "5512345621"});
                table1.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table1.AddRow(new string[] {
                            "Hobbies",
                            "Movies, Hockey"});
                table1.AddRow(new string[] {
                            "Languages",
                            "Portuguese"});
                table1.AddRow(new string[] {
                            "Skills",
                            "Software"});
                table1.AddRow(new string[] {
                            "Country",
                            "Brazil"});
                table1.AddRow(new string[] {
                            "Select Country",
                            "India"});
                table1.AddRow(new string[] {
                            "Date Of Birth",
                            "1999/March/19"});
                table1.AddRow(new string[] {
                            "Password",
                            "Lol12345"});
                table1.AddRow(new string[] {
                            "Confirm Password",
                            "Lol12345"});
#line 7
 testRunner.Given("que o usuário preenche os campos do registro com os seguintes valores", ((string)(null)), table1, "Dado ");
#line hidden
#line 23
 testRunner.When("o usuário solicita para enviar o formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 24
 testRunner.Then("visualiza a tela de registro com o título \"Register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
